import{e as y,f as m}from"./Bkm6qw8b.js";import{a as O}from"./BtuP6t-4.js";import{S as c}from"./9Qm2jZ7z.js";import{u as E}from"./u26IMBn3.js";import{u as T}from"./B1HDS-e3.js";import{u as I}from"./CGIrALZn.js";const C=y("salesOrder",{state:()=>({salesOrders:[],salesOrder:null,originalSalesOrder:null,customerProducts:[],loading:!0,error:null,totalRecords:0,params:{first:0,rows:10,sortField:"createdAt",sortOrder:-1,draw:1,search:"",customerId:null,source:null,status:null},form:{noSo:"",noPo:"",up:"",customerId:null,perusahaanId:null,cabangId:null,date:new Date().toISOString().split("T")[0],dueDate:new Date().toISOString().split("T")[0],discountPercent:0,taxPercent:0,description:"",attachment:null,status:"draft",paymentMethod:null,source:null,salesOrderItems:[]},isEditMode:!1,showModal:!1,validationErrors:[]}),getters:{allAvailableProducts(e){const s=I().products||[],n=e.customerProducts||[],o=new Map;return s.forEach(t=>o.set(t.id,t)),n.forEach(t=>o.set(t.id,t)),Array.from(o.values())}},actions:{async fetchSalesOrders(){var a;this.loading=!0,this.error=null;const{$api:e}=m();try{const o=(await(await fetch(e.csrfToken(),{credentials:"include"})).json()).token,t=localStorage.getItem("token");if(!o)throw new Error("CSRF token not found. Cannot proceed with request.");const r=new URL(e.salesOrder()),i=new URLSearchParams({page:(this.params.first/this.params.rows+1).toString(),rows:this.params.rows.toString(),sortField:this.params.sortField||"",sortOrder:((a=this.params.sortOrder)==null?void 0:a.toString())||"",draw:this.params.draw.toString(),search:this.params.search||""});this.params.customerId&&i.append("customerId",this.params.customerId.toString()),this.params.source&&i.append("source",this.params.source),this.params.status&&i.append("status",this.params.status),r.search=i.toString();const h=await fetch(r,{method:"GET",headers:{Authorization:`Bearer ${t}`,Accept:"application/json","Content-Type":"application/json"},credentials:"include"});if(!h.ok)throw new Error("Gagal mengambil data salesOrder");const d=await h.json();this.salesOrders=d.data,this.totalRecords=d.meta.total}catch(s){console.error("Gagal mengambil data salesOrder:",s),this.error=s,c.fire("Error",`Tidak dapat memuat data Sales Order: ${s.message}`,"error")}finally{this.loading=!1}},async fetchProductsForCustomer(e){this.loading=!0,this.error=null;const{$api:a}=m();if(!e){this.customerProducts=[];return}try{const o=(await(await fetch(a.csrfToken(),{credentials:"include"})).json()).token,t=localStorage.getItem("token");if(!o)throw new Error("CSRF token not found. Cannot proceed with request.");const r=await fetch(a.customer()+"/"+e,{headers:{Authorization:`Bearer ${t}`,Accept:"application/json"},credentials:"include"});if(!r.ok)throw new Error("Gagal mengambil data produk untuk customer");const i=await r.json();this.customerProducts=i.data.customerProducts||[]}catch(s){console.error("Error fetching products for customer:",s),c.fire("Error","Gagal memuat produk untuk customer yang dipilih.","error")}finally{this.loading=!1}},async saveSalesOrder(){this.loading=!0,this.validationErrors=[];const{$api:e}=m(),a=E(),s=T(),n=I(),o=this.form.salesOrderItems.filter(t=>t.productId&&t.warehouseId&&t.quantity>0).map(t=>({productId:t.productId,warehouseId:t.warehouseId,quantity:t.quantity}));if(o.length>0)try{const r=(await s.validateStockBatch(o)).find(i=>!i.hasEnoughStock);if(r){const i=n.products||[],h=this.customerProducts||[],l=[...i,...h].find(f=>f&&f.id===r.productId),p=`Stok untuk produk "${l?l.name:`ID ${r.productId}`}" tidak mencukupi. Stok tersedia: ${Math.floor(Number(r.availableStock))}, kuantitas diminta: ${r.requestedQuantity}.`;this.validationErrors=[{message:p,field:"quantity"}],c.fire("Stok Tidak Cukup",p,"error"),this.loading=!1;return}}catch(t){console.error("Gagal memvalidasi stok:",t),c.fire("Error","Tidak dapat memvalidasi stok untuk produk.","error"),this.loading=!1;return}try{const i=(await(await fetch(e.csrfToken(),{credentials:"include"})).json()).token,h=localStorage.getItem("token");if(!i)throw new Error("CSRF token tidak ditemukan. Tidak dapat melanjutkan request.");const d=new FormData,l={...this.form};delete l.salesOrderItems,delete l.attachment,delete l.customer,delete l.perusahaan,delete l.cabang,delete l.createdByUser,delete l.approvedByUser,delete l.deliveredByUser,delete l.rejectedByUser,Object.keys(l).forEach(u=>{const g=l[u];g!=null&&d.append(u,g)}),!this.isEditMode&&a.user&&a.user.id&&(d.append("createdBy",a.user.id.toString()),this.form.status==="approved"&&d.append("approvedBy",a.user.id.toString()),this.form.status==="rejected"&&d.append("rejectedBy",a.user.id.toString()),this.form.status==="delivered"&&d.append("deliveredBy",a.user.id.toString())),this.form.attachment instanceof File&&d.append("attachment",this.form.attachment),this.form.salesOrderItems.forEach((u,g)=>{u.productId&&u.quantity>0&&Object.keys(u).forEach(w=>{const k=u[w];k!=null&&d.append(`salesOrderItems[${g}][${w}]`,k)})});const S=(this.isEditMode,"POST"),p=this.isEditMode?`${e.salesOrder()}/${this.form.id}`:e.salesOrder();this.isEditMode&&d.append("_method","PUT");const f=await fetch(p,{method:S,headers:{"X-CSRF-TOKEN":i,Authorization:`Bearer ${h}`,Accept:"application/json"},body:d,credentials:"include"});if(f.ok)this.closeModal(),await this.fetchSalesOrders(),c.fire("Berhasil!",`Sales Order berhasil ${this.isEditMode?"diperbarui":"dibuat"}.`,"success");else{const u=await f.json();if(f.status===422)this.validationErrors=u.errors,c.fire("Gagal Validasi",u.errors.map(g=>g.message).join("<br>"),"error");else throw new Error(u.message||"Gagal menyimpan data salesOrder")}}catch(t){this.validationErrors=[],c.fire("Gagal",t.message||"Operasi gagal","error")}finally{this.loading=!1}},async deleteSalesOrder(e){this.loading=!0;const{$api:a}=m();if(!(await c.fire({title:"Apakah Anda yakin?",text:"Data yang dihapus tidak dapat dikembalikan!",icon:"warning",showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Ya, hapus!",cancelButtonText:"Batal"})).isConfirmed){this.loading=!1;return}try{const t=(await(await fetch(a.csrfToken(),{credentials:"include"})).json()).token,r=localStorage.getItem("token"),i=await fetch(`${a.salesOrder()}/${e}`,{method:"DELETE",headers:{"X-CSRF-TOKEN":t,Authorization:`Bearer ${r}`,Accept:"application/json"},credentials:"include"});if(!i.ok){const h=await i.json();throw new Error(h.message||"Gagal menghapus Sales Order")}await this.fetchSalesOrders(),c.fire("Berhasil!","Sales Order berhasil dihapus.","success")}catch(n){c.fire("Error",n.message||"Gagal menghapus Sales Order","error")}finally{this.loading=!1}},async approveSalesOrder(e){this.loading=!0,this.error=null;const{$api:a}=m();try{const s=localStorage.getItem("token"),n=await fetch(a.csrfToken(),{credentials:"include"});if(!n.ok)throw new Error("Gagal mendapatkan CSRF token.");const t=(await n.json()).token,r=await fetch(a.approveSalesOrder(e),{method:"PATCH",headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json",Accept:"application/json","X-CSRF-TOKEN":t},credentials:"include"});if(!r.ok){const i=await r.json().catch(()=>({message:"Gagal mengapprove sales order"}));throw new Error(i.message||"Gagal mengapprove sales order")}return await this.fetchSalesOrders(),await c.fire("Berhasil!","Sales Order berhasil diapprove.","success"),!0}catch(s){return console.error("Error approving sales order:",s),await c.fire("Error",s.message||"Gagal mengapprove sales order.","error"),!1}finally{this.loading=!1}},async rejectSalesOrder(e){this.loading=!0,this.error=null;const{$api:a}=m();try{const s=localStorage.getItem("token"),n=await fetch(a.csrfToken(),{credentials:"include"});if(!n.ok)throw new Error("Gagal mendapatkan CSRF token.");const t=(await n.json()).token,r=await fetch(a.rejectSalesOrder(e),{method:"PATCH",headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json",Accept:"application/json","X-CSRF-TOKEN":t},credentials:"include"});if(!r.ok){const i=await r.json().catch(()=>({message:"Gagal mereject sales order"}));throw new Error(i.message||"Gagal mereject sales order")}return await this.fetchSalesOrders(),await c.fire("Berhasil!","Sales Order berhasil direject.","success"),!0}catch(s){return console.error("Error rejecting sales order:",s),await c.fire("Error",s.message||"Gagal mereject sales order.","error"),!1}finally{this.loading=!1}},async updateStatusPartial(e,a,s){var o;this.loading=!0,this.error=null;const{$api:n}=m();try{const i=(await(await fetch(n.csrfToken(),{credentials:"include"})).json()).token,h=localStorage.getItem("token");if(!i)throw new Error("CSRF token tidak ditemukan. Tidak dapat melanjutkan request.");const d=await O(n.salesOrderItemUpdateStatusPartial(e),{method:"PATCH",headers:{"X-CSRF-TOKEN":i,Authorization:`Bearer ${h}`,Accept:"application/json","Content-Type":"application/json"},body:{statusPartial:a,deliveredQty:s},credentials:"include"}),l=d.data.salesOrderItem,S=d.data.salesOrder;if(this.salesOrder&&this.salesOrder.salesOrderItems){const p=this.salesOrder.salesOrderItems.findIndex(f=>f.id===e);p!==-1&&(this.salesOrder.salesOrderItems[p].statusPartial=l.statusPartial,this.salesOrder.salesOrderItems[p].deliveredQty=l.deliveredQty),this.salesOrder.status!==S.status&&(this.salesOrder.status=S.status)}}catch(t){throw console.error("Gagal memperbarui status item SO atau SO:",t),this.error=t,c.fire("Error",((o=t.data)==null?void 0:o.message)||t.message||"Operasi gagal","error"),t}finally{this.loading=!1}},async openModal(e=null,a=null){if(this.isEditMode=!!e,this.validationErrors=[],e){await this.getSalesOrderDetails(e.id);const s=this.salesOrder;if(!s){c.fire("Error","Tidak dapat memuat data Sales Order.","error");return}this.originalSalesOrder=JSON.parse(JSON.stringify(s));const n=r=>r?new Date(r).toISOString().split("T")[0]:null,o={...JSON.parse(JSON.stringify(s)),attachment:null};["date","dueDate","approvedAt","deliveredAt"].forEach(r=>{o[r]&&(o[r]=n(o[r]))}),this.form=o,a&&(this.form.source=a),this.form.customerId&&await this.fetchProductsForCustomer(this.form.customerId),this.form.salesOrderItems&&this.form.salesOrderItems.length>0?this.form.salesOrderItems=this.form.salesOrderItems.map(r=>({...r,stock:r.stock||{quantity:0}})):(this.form.salesOrderItems=[],this.addItem())}else this.resetForm(a),this.addItem();this.showModal=!0},closeModal(){this.showModal=!1,this.isEditMode=!1,this.originalSalesOrder=null,this.resetForm(),this.validationErrors=[]},resetForm(e=null){this.form={noSo:"",noPo:"",up:"",customerId:null,perusahaanId:null,cabangId:null,date:new Date().toISOString().split("T")[0],dueDate:new Date().toISOString().split("T")[0],discountPercent:0,taxPercent:0,description:"",attachment:null,status:"draft",paymentMethod:null,source:e,salesOrderItems:[]}},addItem(){this.form.salesOrderItems||(this.form.salesOrderItems=[]),this.form.salesOrderItems.push({productId:null,warehouseId:null,quantity:1,price:0,description:"",subtotal:0,stock:{quantity:0}})},removeItem(e){this.form.salesOrderItems.splice(e,1)},setPagination(e){this.params.first=e.first,this.params.rows=e.rows,this.fetchSalesOrders()},setSort(e){this.params.sortField=e.sortField,this.params.sortOrder=e.sortOrder,this.fetchSalesOrders()},setSearch(e){this.params.search=e,this.params.first=0,this.fetchSalesOrders()},setFilters(e){this.params.customerId=e.customerId,this.params.source=e.source,this.params.status=e.status,this.params.search=e.search||"",this.params.first=0,this.fetchSalesOrders()},async getSalesOrderDetails(e){this.loading=!0,this.error=null;const{$api:a}=m();try{const o=(await(await fetch(a.csrfToken(),{credentials:"include"})).json()).token,t=localStorage.getItem("token"),r=await O(a.getSalesOrderDetails(e),{headers:{"X-CSRF-TOKEN":o,Authorization:`Bearer ${t}`,Accept:"application/json"},credentials:"include"});if(!o)throw new Error("CSRF token tidak ditemukan. Tidak dapat melanjutkan request.");if(r&&r.data)this.salesOrder=r.data;else throw new Error("Struktur data tidak valid diterima dari API getSalesOrderDetails.")}catch(s){console.error("Gagal mengambil detail sales order:",s),this.error=s}finally{this.loading=!1}}}});export{C as u};
